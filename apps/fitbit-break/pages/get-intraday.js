import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useRouter } from "next/router";
import React from "react";
import Button from '@mui/material/Button';
import { inspect } from 'util';
import DatabaseUtility from "../lib/DatabaseUtility.mjs";
const { DateTime } = require("luxon");
import { authOptions } from "./auth/[...nextauth]";
import UserInfoHelper from "@time-fit/helper/UserInfoHelper";
import FitbitDataHelper from "@time-fit/data-source/fitbit/helper/FitbitDataHelper";

export async function getServerSideProps(ctx) {
  const session = await getServerSession(ctx.req, ctx.res, authOptions);

  if (!session) {
    return {
      props: {},
    };
  }

  const user = await UserInfoHelper.getUserInfoByUsername(session.user.name);

  const targetDateStart = DateTime.fromISO("2022-07-22");
  const numOfDays = 1;


  const activityResult = await FitbitDataHelper.queryAndStoreFitbitIntradayDataAtTargetDateForUser(user, targetDateStart, false, numOfDays, false);

  return {
    props: { result: activityResult, dateString: `${targetDateStart.toISO()} with ${numOfDays} day(s)`},
  };
}

export default function GetActivitySummary({result, dateString}) {
  const { data: session, status } = useSession();
  const router = useRouter();

  if (status == "loading") return <div>loading...</div>;
  if (!session){
    router.push('/');
    return null;
  }


  let message = "";

  const briefDateString = dateString; //DateTime.fromISO(dateString).toISODate();

  if(result.value == "failed"){
    message = `Fail to get intraday heartrate for ${briefDateString}!\n`;
  }
  else{
    message = `Succeed to get intraday heartrate for ${briefDateString}!\n`;
  }


  const resultData = result.data;


  

  // {\n  errors: [\n    {\n      errorType: 'system',\n      fieldName: 'n/a',\n      message: 'Authorization Error: Invalid authorization token type'\n    }\n  ],\n  success: false\n}"


  const hasAuthorizationError = result.value == "failed" && resultData.errors[0].message.includes("Authorization Error");

  return (
    <div className={styles.container}>
      <Head>
        <title>Fitbit Break</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      <h1 className={styles.title}>{message}</h1>
        <div>
            {result.value == "success"? <h2>Intrady Heartrate: {briefDateString}</h2>:null}
        </div>
        <div>
            {
                JSON.stringify(result.data)
            }
        </div>
        <div>
            {
                result.value == "failed"? `Error: ${resultData.errors[0]["errorType"]}`: null
            }
        </div>
        <div>
            {
                result.value == "failed" && resultData.errors[0]["errorType"] == "expired_token"? 
                
                <Button variant="contained" onClick={(event) => {
                  router.push("/refresh-token");
                  return;
                }} >Refresh token</Button>
                :null
            }
        </div>
        <br />
        <br />
        <div>
            {
                result.value == "failed" && resultData.errors[0]["errorType"] == "invalid_token"? <div>Please connect your Fitbit in Settings.</div>:null
            }
        </div>
        <br />
        <br />

        <Button variant="contained" onClick={(event) => {
            router.push("/main");
            return;
          }} >Return to settings</Button>

      </main>

      <footer className={styles.main}>
        <div>WalkToJoy Study</div>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          
          <div>University of Michigan</div>
        </a>
      </footer>
    </div>
  );
}
