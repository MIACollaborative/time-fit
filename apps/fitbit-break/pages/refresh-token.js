import Head from "next/head";
import styles from "../styles/Home.module.css";

import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import React from "react";

import Button from "@mui/material/Button";

import FitbitHelper from "../lib/FitbitHelper.mjs";
import { inspect } from "util";

import { getServerSession } from "next-auth/next";
import { authOptions } from "./auth/[...nextauth]";
import UserInfoHelper from "@time-fit/helper/UserInfoHelper";

export async function getServerSideProps(ctx) {
  const session = await getServerSession(ctx.req, ctx.res, authOptions);

  if (!session) {
    return {
      props: {},
    };
  }

  const user = await UserInfoHelper.getUserInfoByUsername(session.user.name);

  async function updateToken(hashCode, accessToken, refreshToken) {
    const updateUser = await UserInfoHelper.updateUserInfoByPropertyValue(
      "hash",
      hashCode,
      {
        accessToken: accessToken,
        refreshToken: refreshToken,
      }
    );
  }

  

  const refreshResult = await FitbitHelper.refreshToken(user.refreshToken)
    .then((responseData) => {
      const newAccessToken = responseData.access_token;
      const newRefreshToken = responseData.refresh_token;

      updateToken(user.hash, newAccessToken, newRefreshToken);

      return { value: "success", data: responseData };
    })
    .catch((error) => {
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.log(`Data: ${error.response.data}`);
        console.log(`Status: ${error.response.status}`);
        console.log(`StatusText: ${error.response.statusText}`);
        console.log(`Headers: ${error.response.headers}`);

        console.log(`Error response`);
        // which means, authentication falil
      } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        console.log(error.request);

        console.log(`Error request`);
      } else {
        // Something happened in setting up the request that triggered an Error
        // console.log('Error', error.message);

        console.log("Error else");
      }
      //res.status(error.response.status).json({ response: inspect(error.response.data) });

      return { value: "failed", data: inspect(error.response.data) };
    });

  return {
    props: { result: refreshResult },
  };
}

export default function RefreshToken({ result }) {
  const { data: session, status } = useSession();
  const router = useRouter();

  if (status == "loading") return <div>loading...</div>;
  if (!session) {
    router.push("/");
    return null;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Fitbit Break</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{`Refresh token ${result.value}`}</h1>
        <div>{JSON.stringify(result.data)}</div>
        <div>
          {result.value == "failed" ? `Error: ${result.data.errorType}` : null}
        </div>
        <Button
          variant="contained"
          style={{ width: "100%" }}
          onClick={(event) => {
            router.push("/main");
            return;
          }}
        >
          Return to home
        </Button>
      </main>

      <footer className={styles.main}>
        <div>Fitbit Break</div>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <div>University of Michigan</div>
        </a>
      </footer>
    </div>
  );
}
