import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

//import logger from "../lib/logger";
import prisma from '../lib/prisma';



import { useSession, signIn, signOut, getSession } from "next-auth/react";
import { useRouter } from "next/router";
import React from "react";
import Button from '@mui/material/Button';
import FitbitHelper from "../lib/FitbitHelper.mjs";
import { inspect } from 'util';
import GeneralUtility from "../lib/GeneralUtility.mjs";
import DatabaseUtility from "../lib/DatabaseUtility.mjs";
const { DateTime } = require("luxon");
//import pkg from 'luxon';
//const {DataTime} = pkg;

/*
function replacer(key, value) {
  if (typeof value === 'Date') {
    return value.toString();
  }
  return value;
}
*/

/*



async function updateFitbitProfile(hashCode, fitbitId, fitbitDisplayName, fitbitFullName) {
  console.log(`updateFitbitId, hashCode: ${hashCode}`);
  console.log(`updateFitbitId, fitbitId: ${fitbitId}`);
  console.log(`updateFitbitId, fitbitDisplayName: ${fitbitDisplayName}`);
  console.log(`updateFitbitId, fitbitFullName: ${fitbitFullName}`);

  const firstUser = await prisma.users.findFirst({
    where: { hash: hashCode },
  });

  console.log(`firstUser: ${JSON.stringify(firstUser)}`);

  const updateUser = await prisma.users.update({
    where: { username: firstUser.username },
    data: {
      fitbitId: fitbitId,
      fitbitDisplayName: fitbitDisplayName,
      fitbitFullName: fitbitFullName
    },
  });

  console.log(`updateUser: ${JSON.stringify(updateUser)}`);
}
*/






export async function getServerSideProps(ctx) {
    const session = await getSession(ctx);
  //const { encodedId, accessToken, dateTimeStr } = query;

  const user = await prisma.users.findFirst({
    where: { username: session.user.name },
  });

  let targetDate = DateTime.fromISO("2022-03-10");

  console.log(`usr: ${JSON.stringify(user, null, 2)}`);

  const queryResult = await DatabaseUtility.queryAndStoreFitbitHeartRateAtTargetDateForUser(user, targetDate, false);


  return {
    props: { result: queryResult, dateString: targetDate.toISO()},
  };
}

export default function GetHeartRate({result, dateString}) {
  const { data: session, status } = useSession();
  const router = useRouter();

  if (status == "loading") return <div>loading...</div>;
  if (!session){
    router.push('/');
    return null;
  }

  console.log(`session: ${JSON.stringify(session)}`);


  let message = "";

  let briefDateString = DateTime.fromISO(dateString).toISODate();

  if(result.value == "failed"){
    message = `Fail to get activity summary for ${briefDateString}!\n`;
  }
  else{
    message = `Succeed to get activity summary ${briefDateString}!\n`;
  }


  console.log(`result.data: ${result.data}`);
  console.log(`typeof result.data: ${typeof result.data}`);

  let resultData = result.data;


  

  // {\n  errors: [\n    {\n      errorType: 'system',\n      fieldName: 'n/a',\n      message: 'Authorization Error: Invalid authorization token type'\n    }\n  ],\n  success: false\n}"


  let hasAuthorizationError = false;

  console.log(`result Data type: ${typeof resultData}`);

  if(result.value == "failed" && resultData.errors[0].message.includes("Authorization Error")){
    hasAuthorizationError = true;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Walk To Joy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      <h1 className={styles.title}>{message}</h1>
        <div>
            {result.value == "success"? <h2>Steps: {resultData.summary.steps}</h2>:null}
        </div>
        <div>
            {
                JSON.stringify(result.data)
            }
        </div>
        <div>
            {
                result.value == "failed"? `Error: ${resultData.errors[0]["errorType"]}`: null
            }
        </div>
        <div>
            {
                result.value == "failed" && resultData.errors[0]["errorType"] == "expired_token"? 
                
                <Button variant="contained" onClick={(event) => {
                  router.push("/refresh-token");
                  return;
                }} >Refresh token</Button>
                :null
            }
        </div>
        <br />
        <br />
        <div>
            {
                result.value == "failed" && resultData.errors[0]["errorType"] == "invalid_token"? <div>Please connect your Fitbit in Settings.</div>:null
            }
        </div>
        <br />
        <br />

        <Button variant="contained" onClick={(event) => {
            router.push("/main");
            return;
          }} >Return to settings</Button>

      </main>

      <footer className={styles.main}>
        <div>WalkToJoy Study</div>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <div>School of Information</div>
          <div>University of Michigan</div>
        </a>
      </footer>
    </div>
  );
}

/*

<div>Please do not share your participant ID and token with others.</div>

<div>Participant ID</div>
        <InputText value={value1} placeholder={"Enter your participant ID"} onChange={(e) => setValue1(e.target.value)} />
        <Password value={value2} placeholder={"Enter your 8-digit token"} feedback={false} onChange={(e) => setValue2(e.target.value)} toggleMask />
*/

/*
<div>
{
  logList.map((log, index) => {
    return <div key={index}>
      <div>{log.type}</div>
      <div>{log.createdAt}</div>
      <div>{JSON.stringify(log.content)}</div>
    </div>;
  })
}
</div>
*/

/*
      <footer className={styles.footer}>
        <div>
          WalkToJoy Study
        </div>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <div>School of Information</div>
        <div>University of Michigan</div>
          
        </a>
      </footer>


Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>



        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>


<div className={styles.grid}>
<a href="https://nextjs.org/docs" className={styles.card}>
  <h2>Documentation &rarr;</h2>
  <p>Find in-depth information about Next.js features and API.</p>
</a>

<a href="https://nextjs.org/learn" className={styles.card}>
  <h2>Learn &rarr;</h2>
  <p>Learn about Next.js in an interactive course with quizzes!</p>
</a>

<a
  href="https://github.com/vercel/next.js/tree/canary/examples"
  className={styles.card}
>
  <h2>Examples &rarr;</h2>
  <p>Discover and deploy boilerplate example Next.js projects.</p>
</a>

<a
  href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
  className={styles.card}
>
  <h2>Deploy &rarr;</h2>
  <p>
    Instantly deploy your Next.js site to a public URL with Vercel.
  </p>
</a>
</div>
*/
