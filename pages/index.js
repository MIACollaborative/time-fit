import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import "primereact/resources/themes/nova/theme.css"
import "primereact/resources/primereact.min.css";
import "primeicons/primeicons.css";
import 'primeflex/primeflex.css';

import logger from "../lib/logger";
import prisma from '../lib/prisma';

import { useSession, signIn, signOut } from "next-auth/react"
import { useRouter } from 'next/router'
import React, { useState } from 'react';
import { InputText } from 'primereact/inputtext';
import { Password } from 'primereact/password';
import { Button } from 'primereact/button';


function replacer(key, value) {
  if (typeof value === 'Date') {
    return value.toString();
  }
  return value;
}

/*
export const getServerSideProps = async ({ req }) => {
  // const token = req.headers.AUTHORIZATION
  // const userId = await getUserId(token)\

  const logs = await prisma.log.findMany();

  const logList = JSON.parse(JSON.stringify(logs, replacer));

  return {
    props : { logList }
  }
}
*/


export default function Home() {

  const { data: session, status } = useSession();
  const router = useRouter();

  //logger.logToDB("home", {message: "test"});

  //const [value1, setValue1] = useState('');
  //const [value2, setValue2] = useState('');

  

  // status: enum mapping to three possible session states: "loading" | "authenticated" | "unauthenticated"
  if (status == "loading") return <div>loading...</div>;
  
  if (session){
      router.push('/main');
      return null;
  }
  

  console.log(`session: ${JSON.stringify(session)}`);

  // I store username in "name" to be properly returned
  /*
  if (session) {
    return (
      <>
        Signed in as {session.user.name} <br />
        <Button label="Sign out" className="p-button-danger" onClick={() => signOut()}/>
      </>
    )
  }
  return (
    <>
      Not signed in <br />
      <button onClick={() => signIn()}>Sign in</button>
    </>
  )
  */

  return (
    <div className={styles.container}>
      <Head>
        <title>Walk To Joy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
        Walk To Joy
        </h1>

        
        <Button label="Sign in" className="p-button-danger" onClick={() => signIn()}/>
        




      </main>

      <footer className={styles.main}>
        <div>
          WalkToJoy Study
        </div>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <div>School of Informaiton</div>
        <div>University of Michigan</div>
          
        </a>
      </footer>
    </div>
  )
}


/*

<div>Please do not share your participant ID and token with others.</div>

<div>Participant ID</div>
        <InputText value={value1} placeholder={"Enter your participant ID"} onChange={(e) => setValue1(e.target.value)} />
        <Password value={value2} placeholder={"Enter your 8-digit token"} feedback={false} onChange={(e) => setValue2(e.target.value)} toggleMask />
*/

/*
<div>
{
  logList.map((log, index) => {
    return <div key={index}>
      <div>{log.type}</div>
      <div>{log.createdAt}</div>
      <div>{JSON.stringify(log.content)}</div>
    </div>;
  })
}
</div>
*/



/*
      <footer className={styles.footer}>
        <div>
          WalkToJoy Study
        </div>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <div>School of Informaiton</div>
        <div>University of Michigan</div>
          
        </a>
      </footer>


Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>



        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>


<div className={styles.grid}>
<a href="https://nextjs.org/docs" className={styles.card}>
  <h2>Documentation &rarr;</h2>
  <p>Find in-depth information about Next.js features and API.</p>
</a>

<a href="https://nextjs.org/learn" className={styles.card}>
  <h2>Learn &rarr;</h2>
  <p>Learn about Next.js in an interactive course with quizzes!</p>
</a>

<a
  href="https://github.com/vercel/next.js/tree/canary/examples"
  className={styles.card}
>
  <h2>Examples &rarr;</h2>
  <p>Discover and deploy boilerplate example Next.js projects.</p>
</a>

<a
  href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
  className={styles.card}
>
  <h2>Deploy &rarr;</h2>
  <p>
    Instantly deploy your Next.js site to a public URL with Vercel.
  </p>
</a>
</div>
*/